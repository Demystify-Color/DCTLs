/*
3x3 Matrix ("Color Crosstalk") that automatically preserves neutrals 
Written by Nico Wieseneder, www.demystify-color.com

*/

DEFINE_UI_PARAMS(g_red, Green in Red, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(b_red, Blue in Red, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(r_green, Red in Green, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(b_green, Blue in Green, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(r_blue, Red in Blue, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(g_blue, Green in Blue, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
	{
	float3 inRGB = make_float3(p_R, p_G, p_B);
	float3 out = inRGB;
		
	// 3x3 Matrix that automatically preserves neutrals
	out.x = (out.x * (1 - g_red - b_red)) + (out.y * g_red) + (out.z * b_red);
	out.y = (out.x * (r_green)) + (out.y * (1 - r_green - b_green) ) + (out.z * b_green);
	out.z = (out.x * (r_blue)) + (out.y * g_blue) + (out.z * (1 - r_blue - g_blue));		

		
	return out;
	}